# 정규 표현식의 기초, 메타문자
# 문자클래스[]는 [와 ] 사이의 문자들과 매치라는 의미를 갖는다. [abc]라면 a,b,c중 한개의 문자와 매치를 의미
'''
정규식  문자열  매치여부    설명
[a,b,c] a       yes     'a'는 정규식과 일치하는 문자인 'a'가 있으므로 매치
        before  yes     'before'는 정규식과 일치하는 문자인 'b'가 있으므로 매치
        dude    no      'dude'는 정규식과 일치하는 문자인 a,b,c중 어느 하나도 포함하지 않으므로 매치되지 않음
[]안에 하이픈(-)을 사용하게 되면 두 문자 사이의 범위를 의미
- [a-zA-Z] : 알파벳 모두
- [0-9] : 숫자
자주 사용하는 문자 클래스
정규 표현식 설명
\d          숫자와 매치, [0-9]와 동일한 표현
\D          숫자가 아닌 것과 매치, [^0-9]와 동일한 표현식이다.
\s          whitespace 문자와 매치, [ \t\n\r\f\v]와 동일한 표현식이다.
\S          whitespace 문자가 아닌 것과 매치, [^ \t\n\r\f\v]와 동일한 표현식이다.
\w          문자+숫자(alphanumeric)와 매치, [a-zA-Z0-9]와 동일한 표현식이다.
\W          문자+숫자(alphanumeric)가 아닌 문자와 매치[^a-zA-Z0-9]와 동일한 표현식이다.
대문자로 사용된 것은 소문자의 반대임을 의미
'''
# Dot(.)은 줄바꿈 문자인 \n를 제외한 모든 문자와 매치됨을 의미한다.
'''
a.b # a와 b 사이에 줄바꿈 문자를 제외한 어떤 문자가 들어가도 모두 매치 --> 'a + 모든문자 + b'
정규식  문자열  매치여부    설명
a.b     aab     yes     'aab'는 가운데 문자 'a'가 모든 문자를 의미하는 .과 일치하므로 정규식과 매치
        a0b     yes     'a0b'는 가운데 문자 '0'이 모든 문자를 의미하는 .과 일치하므로 정규식과 매치
        abc     no      'abc'는 'a'문자와 'b'문자 사이에 어떤 문자라도 하나는 있어야 하는 이 정규식과 일치하지 않으므로 매치되지 않음
a[.]b # a와 b사이에 Dot(.)문자가 있으면 매치 --> 'a + Dot(.)문자 + b'
'''
# 반복(*)은 *바로 앞에 있는 문자가 0부터 무한대로 반복될 수 있다는 의미이다.
'''
ca*t # *문자 바로 앞에 있는 a가 0번이상 반복되면 매치
정규식  문자열  매치여부    설명
ca*t    ct      yes     'a'가 0번 반복되어 매치
        cat     yes     'a'가 0번 이상 반복되어 매치(1번 반복)
        caaat   yes     'a'가 0번 이상 반복되어 매치(3번 반복)
'''
# 반복(+)은 +바로 앞에 있는 문자가 1부터 무한대로 반복될 수 있다는 의미이다.
'''
ca+t # 문자 바로 앞에 있는 a가 1번 이상 반복되면 매치 --> 'c + a(1번 이상 반복) + t'
정규식  문자열  매치여부    설명
ca+t    ct      no      'a'가 0번 반복되어 매치되지 않음
        cat     yes     'a'가 1번 이상 반복되어 매치(1번 반복)
        caaat   yes     'a'가 1번 이상 반복되어 매치(3번 반복)
'''
# 반복{m}은 {m}바로 앞에 있는 문자가 m번 반복된다는 의미이다.
'''
ca{2}t # a가 2번 반복되면 매치 --> 'c + a(반드시 2번 반복) + t'
정규식  문자열  매치여부    설명
ca{2}t  cat     no      'a'가 1번만 반복되어 매치되지 않음
        caat    yes     'a'가 2번 반복되어 매치
        caaat   no      'a'가 3번 반복되어 매치되지 않음
'''
# 반복{m, n}은 {m, n}바로 앞에 있는 문자가 m번이상 n번이하(즉, m~n번) 반복된다는 의미이다.
'''
ca{2,5}t # a가 2~5번 반복되면 매치 --> 'c + a(2~5번 반복) + t'
정규식      문자열  매치여부    설명
ca{2,5}t    cat     no      'a'가 1번만 반복되어 매치되지 않음
            caat    yes     'a'가 2번 반복되어 매치
            caaaaat yes     'a'가 5번 반복되어 매치
추가적으로 {1,}은 +와 동일하고, {0,}은 *와 동일하다.
{,3}은 반복회수가 3회 이하를 의미하고, {3,}은 반복회수가 3회 이상을 의미한다.
'''
# ?는 바로 앞에 문자가 0번 또는 1번 반복된다는 의미이다.(즉, 있거나 없거나)
# ?는 {0,1}과 동일한 의미이다.
'''
ab?c # b가 0~1번 사용되면 매치 --> 'a + b(있어도 되고 없어도 된다) + c'
정규식  문자열  매치여부    설명
av?c    abc     yes     'b'가 1번 사용되어 매치
        ac      yes     'b'가 0번 시용되어 매치
'''
# *, +, ? 메타문자는 모두 {m, n}형태로 고쳐 쓰는 것이 가능하지만 가급적 이해하기 쉽고 표현도 간결한 *, +, ? 메타문자를 사용하는 것이 좋다.